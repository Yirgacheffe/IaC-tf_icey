# 1. Create VPC
# 2. Internet gateway associated with VPC
# 3. Subnet inside VPC
# 4. Route Table inside VPC with a route that directs internet-bound traffic to the internet gateway
# 5. Route table association with our subnet to make it a public subnet
# 6. Security group inside VPC
# 7. Key pair used for SSH access
# 8. EC2 instance inside our public subnet with an associated security group and a generated key pair

# Create terraform template of AWS Provider to demo a solution
provider "aws" {
    region  = "${var.aws_region}"
}

# ------------------------------------------------------------
# Local variables
# ------------------------------------------------------------
locals {
    region      = "${var.aws_region}"
    name_suffix = "${var.proj_name}-${var.env}"

    required_tags = {
        proj = var.proj_name
        env  = var.env
    }
    
    tags = merge(var.resource_tags, local.required_tags)
}

# ------------------------------------------------------------
# Create Network
# ------------------------------------------------------------

module "vpc" {
    source = "terraform-aws-modules/vpc/aws"

    name = "icey-vpc"
    cidr = "${var.vpc_cidr_block}"

    azs              = ["${local.region}a", "${local.region}b"]
    public_subnets   = ["20.10.10.0/24", "20.10.20.0/24"]
    private_subnets  = ["20.10.40.0/24", "20.10.50.0/24"]
    database_subnets = ["20.10.60.0/24", "20.10.70.0/24"]

    create_database_subnet_group = true

    manage_default_route_table = true
    default_route_table_tags   = { DefaultRouteTable = true }

    enable_dns_hostnames = true
    enable_dns_support   = true

    # Default security group - ingress/egress rules cleared to deny all
    manage_default_security_group  = true
    default_security_group_ingress = []
    default_security_group_egress  = []

    tags = local.tags
}
